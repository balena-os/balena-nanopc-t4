From 2ed09d2c6dabe7ae167b4e1fa585f5e1fbced5b2 Mon Sep 17 00:00:00 2001
From: Dineshkumar V <dineshkumar.varadarajan@adlinktech.com>
Date: Wed, 26 Feb 2020 18:45:49 +0530
Subject: [PATCH 7/7] Added SPI chip select enable/disable support for SPI
 Read/Write

---
 drivers/spi/spi-rockchip.c | 14 ++------------
 drivers/spi/spi.c          | 18 ++++++++++++++++--
 include/linux/spi/spi.h    |  1 +
 3 files changed, 19 insertions(+), 14 deletions(-)

diff --git a/drivers/spi/spi-rockchip.c b/drivers/spi/spi-rockchip.c
index a9a6339..7e44fcf 100644
--- a/drivers/spi/spi-rockchip.c
+++ b/drivers/spi/spi-rockchip.c
@@ -433,18 +433,9 @@ static void rockchip_spi_dma_txcb(void *data)
 	spin_unlock_irqrestore(&rs->lock, flags);
 }
 
-static u32 rockchip_spi_calc_burst_size(u32 data_len)
-{
-	u32 i;
 
 	/* burst size: 1, 2, 4, 8 */
-	for (i = 1; i < 8; i <<= 1) {
-		if (data_len & i)
-			break;
-	}
 
-	return i;
-}
 
 static int rockchip_spi_prepare_dma(struct rockchip_spi *rs)
 {
@@ -465,7 +456,7 @@ static int rockchip_spi_prepare_dma(struct rockchip_spi *rs)
 		rxconf.direction = rs->dma_rx.direction;
 		rxconf.src_addr = rs->dma_rx.addr;
 		rxconf.src_addr_width = rs->n_bytes;
-		rxconf.src_maxburst = rockchip_spi_calc_burst_size(rs->len / rs->n_bytes);
+		rxconf.src_maxburst = 1;
 		dmaengine_slave_config(rs->dma_rx.ch, &rxconf);
 
 		rxdesc = dmaengine_prep_slave_sg(
@@ -598,8 +589,7 @@ static void rockchip_spi_config(struct rockchip_spi *rs)
 	writel_relaxed(rs->fifo_len / 2 - 1, rs->regs + ROCKCHIP_SPI_RXFTLR);
 
 	writel_relaxed(rs->fifo_len / 2 - 1, rs->regs + ROCKCHIP_SPI_DMATDLR);
-	writel_relaxed(rockchip_spi_calc_burst_size(rs->len / rs->n_bytes) - 1,
-		       rs->regs + ROCKCHIP_SPI_DMARDLR);
+	writel_relaxed(0, rs->regs + ROCKCHIP_SPI_DMARDLR);
 	writel_relaxed(dmacr, rs->regs + ROCKCHIP_SPI_DMACR);
 
 	spi_set_clk(rs, div);
diff --git a/drivers/spi/spi.c b/drivers/spi/spi.c
index c132c67..6b94ee4 100644
--- a/drivers/spi/spi.c
+++ b/drivers/spi/spi.c
@@ -673,6 +673,10 @@ static void spi_set_cs(struct spi_device *spi, bool enable)
 	if (spi->mode & SPI_CS_HIGH)
 		enable = !enable;
 
+	if(spi->spi_gpio_cs>0)
+	{
+		gpio_set_value(spi->spi_gpio_cs,!enable);
+	}
 	if (gpio_is_valid(spi->cs_gpio))
 		gpio_set_value(spi->cs_gpio, !enable);
 	else if (spi->master->set_cs)
@@ -903,8 +907,6 @@ static int spi_map_msg(struct spi_master *master, struct spi_message *msg)
 		if (max_tx || max_rx) {
 			list_for_each_entry(xfer, &msg->transfers,
 					    transfer_list) {
-				if (!xfer->len)
-					continue;
 				if (!xfer->tx_buf)
 					xfer->tx_buf = master->dummy_tx;
 				if (!xfer->rx_buf)
@@ -1521,6 +1523,18 @@ of_register_spi_device(struct spi_master *master, struct device_node *nc)
 	}
 	spi->max_speed_hz = value;
 
+	spi->spi_gpio_cs=of_get_named_gpio(nc,"spi-gpio-cs",0);
+	if(spi->spi_gpio_cs>0)
+	{
+		printk("spi->spi_gpio_cs=%d\n",spi->spi_gpio_cs);
+		rc = gpio_request(spi->spi_gpio_cs, "spi0_gpio_cs");
+       		if (rc != 0) {
+                	gpio_free(spi->spi_gpio_cs);
+                printk("gpio request spi_gpio_cs  failed\n");
+        	}
+        	else
+                    gpio_direction_output(spi->spi_gpio_cs, 1);
+        }	
 	/* Store a pointer to the node in the device structure */
 	of_node_get(nc);
 	spi->dev.of_node = nc;
diff --git a/include/linux/spi/spi.h b/include/linux/spi/spi.h
index cce80e6..e1b8c04 100644
--- a/include/linux/spi/spi.h
+++ b/include/linux/spi/spi.h
@@ -158,6 +158,7 @@ struct spi_device {
 	void			*controller_data;
 	char			modalias[SPI_NAME_SIZE];
 	int			cs_gpio;	/* chip select gpio */
+	int 			spi_gpio_cs;/*add by lm*/
 
 	/* the statistics */
 	struct spi_statistics	statistics;
-- 
2.7.4

